{
  "name": "onecolor",
  "description": "Javascript color object with implicit color space conversions. Supports RGB, HSV, HSL and CMYK with alpha channel.",
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/One-com/one-color.git"
  },
  "version": "2.5.0",
  "keywords": [
    "ender",
    "color",
    "colour",
    "requirejs",
    "amd"
  ],
  "maintainers": [
    {
      "name": "Peter MÃ¼ller",
      "email": "munter@fumle.dk"
    },
    {
      "name": "Andreas Lind Petersen",
      "email": "andreas@one.com"
    }
  ],
  "devDependencies": {
    "assetgraph": "=1.0.1",
    "assetgraph-builder": "=1.0.3",
    "jamjs": "=0.2.17",
    "optimist": "=0.3.1",
    "uglify-js": "=2.4.15",
    "vows": "=0.7.0"
  },
  "engines": {
    "node": ">=0.4.8"
  },
  "files": [
    "one-color-all-debug.js",
    "one-color-all.js",
    "one-color-debug.js",
    "one-color.js",
    "one-color-ieshim.js"
  ],
  "publishConfig": {
    "registry": "http://registry.npmjs.org/"
  },
  "main": "one-color-all-debug.js",
  "ender": "lib/ender.js",
  "scripts": {
    "postpublish": "jam publish",
    "test": "vows"
  },
  "jam": {
    "main": "one-color-all.js",
    "include": [
      "one-color.js",
      "one-color-all.js",
      "one-color-ieshim.js",
      "README.md",
      "LICENSE"
    ]
  },
  "readme": "one.color\n=========\n\nJavaScript color calculation toolkit for node.js and the browser.\n\nFeatures:\n* RGB, HSV, HSL, and CMYK colorspace support (experimental implementations of LAB and XYZ)\n* Legal values for all channels are 0..1\n* Instances are immutable -- a new object is created for each manipulation\n* All internal calculations are done using floating point, so very little precision is lost due to rounding errors when converting between colorspaces\n* Alpha channel support\n* Extensible architecture -- implement your own colorspaces easily\n* Chainable color manipulation\n* Seamless conversion between colorspaces\n* Outputs as hex, `rgb(...)`, `rgba(...)` or `hsv(...)`\n\nModule support:\n* CommonJS / Node\n* AMD / RequireJS\n* jQuery (installs itself on $.color)\n* Vanilla JS (installs itself on one.color)\n\nPackage managers:\n* npm: `npm install onecolor`\n* bower: `bower install color`\n\nWARNING IE USERS:\nThis library uses some modern ecmascript methods that aren't available in IE versions below IE9.\nTo keep the core library small, these methods aren't polyfilled in the library itself.\nIf you want IE support for older IE versions, please include <a href=\"//raw.github.com/One-com/one-color/master/one-color-ieshim.js\">one-color-ieshim.js</a> before the color library. This is only needed if you don't already have a library installed that polyfills `Array.prototype.map`and `Array.prototype.forEach`.\n\nUsage\n-----\n\nIn the browser (change <a href=\"//raw.github.com/One-com/one-color/master/one-color.js\">one-color.js</a> to <a href=\"//raw.github.com/One-com/one-color/master/one-color-all.js\">one-color-all.js</a> to gain\nnamed color support):\n\n```html\n<script src='one-color.js'></script>\n<script>\n    alert('Hello, ' + one.color('#650042').lightness(.3).green(.4).hex() + ' world!');\n</script>\n```\n\nIn node.js (after `npm install onecolor`):\n\n```javascript\nvar color = require('onecolor');\nconsole.warn(color('rgba(100%, 0%, 0%, .5)').alpha(.4).cssa()); // 'rgba(255,0,0,0.4)'\n```\n\n`one.color` is the parser. All of the above return color instances in\nthe relevant color space with the channel values (0..1) as instance\nvariables:\n\n```javascript\nvar myColor = one.color('#a9d91d');\nmyColor instanceof one.color.RGB; // true\nmyColor.red() // 0.6627450980392157\n```\n\nYou can also parse named CSS colors (works out of the box in node.js,\nbut the requires the slightly bigger <a href=\"//raw.github.com/One-com/one-color/master/one-color-all.js\">one-color-all.js</a> build in the\nbrowser):\n\n```javascript\none.color('maroon').lightness(.3).hex() // '#990000'\n```\n\nTo turn a color instance back into a string, use the `hex()`, `css()`,\nand `cssa()` methods:\n\n```javascript\none.color('rgb(124, 96, 200)').hex() // '#7c60c8'\none.color('#bb7b81').cssa() // 'rgba(187,123,129,1)'\n```\n\nColor instances have getters/setters for all channels in all supported\ncolorspaces (`red()`, `green()`, `blue()`, `hue()`, `saturation()`, `lightness()`,\n`value()`, `alpha()`, etc.). Thus you don't need to think about which colorspace\nyou're in. All the necessary conversions happen automatically:\n\n```javascript\none.color('#ff0000') // Red in RGB\n    .green(1) // Set green to the max value, producing yellow (still RGB)\n    .hue(.5, true) // Add 180 degrees to the hue, implicitly converting to HSV\n    .hex() // Dump as RGB hex syntax: '#2222ff'\n```\n\nWhen called without any arguments, they return the current value of\nthe channel (0..1):\n\n```javascript\none.color('#09ffdd').green() // 1\none.color('#09ffdd').saturation() // 0.9647058823529412\n```\n\nWhen called with a single numerical argument (0..1), a new color\nobject is returned with that channel replaced:\n\n```javascript\nvar myColor = one.color('#00ddff');\nmyColor.red(.5).red() // .5\n\n// ... but as the objects are immutable, the original object retains its value:\nmyColor.red() // 0\n```\n\nWhen called with a single numerical argument (0..1) and `true` as\nthe second argument, a new value is returned with that channel\nadjusted:\n\n```javascript\none.color('#ff0000') // Red\n    .red(-.1, true) // Adjust red channel by -0.1\n    .hex() // '#e60000'\n```\n\nAlpha channel\n-------------\n\nAll color instances have an alpha channel (0..1), defaulting to 1\n(opaque). You can simply ignore it if you don't need it.\n\nIt's preserved when converting between colorspaces:\n\n```javascript\none.color('rgba(10, 20, 30, .8)')\n    .green(.4)\n    .saturation(.2)\n    .alpha() // 0.8\n```\n\nComparing color objects\n-----------------------\n\nIf you need to know whether two colors represent the same 8 bit color, regardless\nof colorspace, compare their `hex()` values:\n\n```javascript\none.color('#f00').hex() === one.color('#e00').red(1).hex() // true\n```\n\nUse the `equals` method to compare two color instances within a certain\nepsilon (defaults to `1e-9`).\n\n```javascript\none.color('#e00').lightness(.00001, true).equals(one.color('#e00'), 1e-5) // false\none.color('#e00').lightness(.000001, true).equals(one.color('#e00'), 1e-5) // true\n```\n\nBefore comparing the `equals` method converts the other color to the right colorspace,\nso you don't need to convert explicitly in this case either:\n\n```javascript\none.color('#e00').hsv().equals(one.color('#e00')) // true\n```\n\nAPI overview\n============\n\nColor parser function, the recommended way to create a color instance:\n\n```javascript\none.color('#a9d91d') // Regular hex syntax\none.color('a9d91d') // hex syntax, # is optional\none.color('#eee') // Short hex syntax\none.color('rgb(124, 96, 200)') // CSS rgb syntax\none.color('rgb(99%, 40%, 0%)') // CSS rgb syntax with percentages\none.color('rgba(124, 96, 200, .4)') // CSS rgba syntax\none.color('hsl(120, 75%, 75%)') // CSS hsl syntax\none.color('hsla(120, 75%, 75%, .1)') // CSS hsla syntax\none.color('hsv(220, 47%, 12%)') // CSS hsv syntax (non-standard)\none.color('hsva(120, 75%, 75%, 0)') // CSS hsva syntax (non-standard)\none.color([0, 4, 255, 120]) // CanvasPixelArray entry, RGBA\none.color([\"RGB\", .5, .1, .6, .9]) // The output format of color.toJSON()\n```\n\nThe slightly bigger <a href=\"//raw.github.com/One-com/one-color/master/one-color-all.js\">one-color-all.js</a> build adds support for\n<a href='http://en.wikipedia.org/wiki/Web_colors'>the standard suite of named CSS colors</a>:\n\n```javascript\none.color('maroon')\none.color('darkolivegreen')\n```\n\nExisting one.color instances pass through unchanged, which is useful\nin APIs where you want to accept either a string or a color instance:\n\n```javascript\none.color(one.color('#fff')) // Same as one.color('#fff')\n```\n\nSerialization methods:\n\n```javascript\ncolor.hex() // 6-digit hex string: '#bda65b'\ncolor.css() // CSS rgb syntax: 'rgb(10,128,220)'\ncolor.cssa() // CSS rgba syntax: 'rgba(10,128,220,0.8)'\ncolor.toString() // For debugging: '[one.color.RGB: Red=0.3 Green=0.8 Blue=0 Alpha=1]'\ncolor.toJSON() // [\"RGB\"|\"HSV\"|\"HSL\", <number>, <number>, <number>, <number>]\n```\n\nGetters -- return the value of the channel (converts to other colorspaces as needed):\n\n```javascript\ncolor.red()\ncolor.green()\ncolor.blue()\ncolor.hue()\ncolor.saturation()\ncolor.value()\ncolor.lightness()\ncolor.alpha()\ncolor.cyan()    // one-color-all.js and node.js only\ncolor.magenta() // one-color-all.js and node.js only\ncolor.yellow()  // one-color-all.js and node.js only\ncolor.black()   // one-color-all.js and node.js only\n```\n\nSetters -- return new color instances with one channel changed:\n\n```javascript\ncolor.red(<number>)\ncolor.green(<number>)\ncolor.blue(<number>)\ncolor.hue(<number>)\ncolor.saturation(<number>)\ncolor.value(<number>)\ncolor.lightness(<number>)\ncolor.alpha(<number>)\ncolor.cyan(<number>)    // one-color-all.js and node.js only\ncolor.magenta(<number>) // one-color-all.js and node.js only\ncolor.yellow(<number>)  // one-color-all.js and node.js only\ncolor.black(<number>)   // one-color-all.js and node.js only\n```\n\nAdjusters -- return new color instances with the channel adjusted by\nthe specified delta (0..1):\n\n```javascript\ncolor.red(<number>, true)\ncolor.green(<number>, true)\ncolor.blue(<number>, true)\ncolor.hue(<number>, true)\ncolor.saturation(<number>, true)\ncolor.value(<number>, true)\ncolor.lightness(<number>, true)\ncolor.alpha(<number>, true)\ncolor.cyan(<number>, true)    // one-color-all.js and node.js only\ncolor.magenta(<number>, true) // one-color-all.js and node.js only\ncolor.yellow(<number>, true)  // one-color-all.js and node.js only\ncolor.black(<number>, true)   // one-color-all.js and node.js only\n```\nComparison with other color objects, returns `true` or `false` (epsilon defaults to `1e-9`):\n\n```javascript\ncolor.equals(otherColor[, <epsilon>])\n```\n\nMostly for internal (and plugin) use:\n-------------------------------------\n\n\"Low level\" constructors, accept 3 or 4 numerical arguments (0..1):\n\n```javascript\nnew one.color.RGB(<red>, <green>, <blue>[, <alpha>])\nnew one.color.HSL(<hue>, <saturation>, <lightness>[, <alpha>])\nnew one.color.HSV(<hue>, <saturation>, <value>[, <alpha>])\n```\nThe <a href=\"//raw.github.com/One-com/one-color/master/one-color-all.js\">one-color-all.js</a> build includes CMYK support:\n\n```javascript\nnew one.color.CMYK(<cyan>, <magenta>, <yellow>, <black>[, <alpha>])\n```\n\nAll color instances have `rgb()`, `hsv()`, and `hsl()` methods for\nexplicitly converting to another color space. Like the setter and\nadjuster methods they return a new color object representing the same\ncolor in another color space.\n\nIf for some reason you need to get all the channel values in a\nspecific colorspace, do an explicit conversion first to cut down on\nthe number of implicit conversions:\n\n```javascript\nvar myColor = one.color('#0620ff').lightness(+.3).rgb();\n// Alerts '0 0.06265060240963878 0.5999999999999999':\nalert(myColor.red() + ' ' + myColor.green() + ' ' + myColor.blue());\n```\n\nBuilding\n========\n\n```\ngit clone https://github.com/One-com/one-color.git\ncd one-color\nnpm install\nmake\n```\n\nIf you aren't up for a complete installation, there are pre-built\npackages in the repository as well as the npm package:\n\n* Basic library: <a href=\"//raw.github.com/One-com/one-color/master/one-color.js\">one-color.js</a>,\n  debuggable version: <a href=\"//raw.github.com/One-com/one-color/master/one-color-debug.js\">one-color-debug.js</a>\n* Full library including named color support: <a href=\"//raw.github.com/One-com/one-color/master/one-color-all.js\">one-color-all.js</a>,\n  debuggable version: <a href=\"//raw.github.com/One-com/one-color/master/one-color-all-debug.js\">one-color-all-debug.js</a>.\n\nLicense\n=======\n\none.color is licensed under a standard 2-clause BSD license -- see the LICENSE-file for details.\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/One-com/one-color/issues"
  },
  "homepage": "https://github.com/One-com/one-color",
  "_id": "onecolor@2.5.0",
  "_shasum": "2256b651dc807c101f00aedbd49925c57a4431c1",
  "_resolved": "https://registry.npmjs.org/onecolor/-/onecolor-2.5.0.tgz",
  "_from": "onecolor@>=2.4.0 <3.0.0"
}
